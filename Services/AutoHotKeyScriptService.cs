using Moodex.Models;
using System.Diagnostics;
using System.IO;
using System.Threading.Tasks;

namespace Moodex.Services
{
    public class AutoHotKeyScriptService : IAutoHotKeyScriptService
    {
        private readonly string _autoHotKeyExecutable;

        public AutoHotKeyScriptService()
        {
            _autoHotKeyExecutable = Path.Combine(AppContext.BaseDirectory, "External Tools", "AutoHotKey", "AutoHotkey64.exe");
        }

        public string CreateScript(GameInfo game)
        {
            // Find the game's main folder by climbing up from the executable
            var gameMainFolder = FindGameMainFolder(game.FileSystemPath, game.Name);
            if (string.IsNullOrEmpty(gameMainFolder))
            {
                throw new InvalidOperationException($"Could not determine game main folder for: {game.FileSystemPath}");
            }

            // Create script as a .txt file for editing
            var scriptName = $"{game.Name} AHK Script.txt";
            var scriptPath = Path.Combine(gameMainFolder, scriptName);
            
            // Create a basic AutoHotKey script template
            var scriptContent = $@"; AutoHotKey Script for {game.Name}
; Generated by Moodex
; Game Path: {game.FileSystemPath}

; Add your key mappings and macros here
; Example:
; F1::Send, {{Enter}}
; ^j::Send, My Text

; This script will run when the game is launched
; Press Ctrl+Alt+Q to exit this script
^!q::ExitApp
";

            File.WriteAllText(scriptPath, scriptContent);
            
            // Update game info
            game.HasAutoHotKeyScript = true;
            
            return scriptPath;
        }

        public void EditScript(GameInfo game)
        {
            if (!HasScript(game))
                return;

            var txtPath = GetTxtScriptPath(game);
            var ahkPath = GetAhkScriptPath(game);
            
            // If .ahk file exists, convert it to .txt for editing
            if (!string.IsNullOrEmpty(ahkPath) && !string.IsNullOrEmpty(txtPath) && File.Exists(ahkPath))
            {
                File.Move(ahkPath, txtPath);
            }
            
            // Open the .txt file for editing
            if (File.Exists(txtPath))
            {
                Process.Start(new ProcessStartInfo(txtPath)
                {
                    UseShellExecute = true
                });
            }
        }

        public void DeleteScript(GameInfo game)
        {
            if (!HasScript(game))
                return;

            var txtPath = GetTxtScriptPath(game);
            var ahkPath = GetAhkScriptPath(game);
            
            // Delete both .txt and .ahk files if they exist
            if (File.Exists(txtPath))
            {
                File.Delete(txtPath);
            }
            if (File.Exists(ahkPath))
            {
                File.Delete(ahkPath);
            }

            // Update game info
            game.HasAutoHotKeyScript = false;
        }

        public void LaunchScript(GameInfo game)
        {
            if (!HasScript(game) || !File.Exists(_autoHotKeyExecutable))
                return;

            var txtPath = GetTxtScriptPath(game);
            var ahkPath = GetAhkScriptPath(game);
            
            // Convert .txt to .ahk if needed before launching
            if (!string.IsNullOrEmpty(txtPath) && !string.IsNullOrEmpty(ahkPath)
                && File.Exists(txtPath) && !File.Exists(ahkPath))
            {
                File.Move(txtPath, ahkPath);
            }
            
            // Launch the .ahk script with AutoHotKey
            if (File.Exists(ahkPath))
            {
                Process.Start(new ProcessStartInfo(_autoHotKeyExecutable, $"\"{ahkPath}\"")
                {
                    UseShellExecute = true
                });
            }
        }

        public bool HasScript(GameInfo game)
        {
            if (!game.HasAutoHotKeyScript)
                return false;

            var txtPath = GetTxtScriptPath(game);
            var ahkPath = GetAhkScriptPath(game);
            
            // Has script if either .txt or .ahk file exists
            return File.Exists(txtPath) || File.Exists(ahkPath);
        }

        /// <summary>
        /// Gets the .txt script path for a game (for editing)
        /// </summary>
        /// <param name="game">The game to get the script path for</param>
        /// <returns>Path to the .txt script file, or null if the game's main folder cannot be determined</returns>
        private string? GetTxtScriptPath(GameInfo game)
        {
            var gameMainFolder = FindGameMainFolder(game.FileSystemPath, game.Name);
            if (string.IsNullOrEmpty(gameMainFolder))
                return null;

            var scriptName = $"{game.Name} AHK Script.txt";
            return Path.Combine(gameMainFolder, scriptName);
        }

        /// <summary>
        /// Gets the .ahk script path for a game (for execution)
        /// </summary>
        /// <param name="game">The game to get the script path for</param>
        /// <returns>Path to the .ahk script file, or null if the game's main folder cannot be determined</returns>
        public string? GetAhkScriptPath(GameInfo game)
        {
            var gameMainFolder = FindGameMainFolder(game.FileSystemPath, game.Name);
            if (string.IsNullOrEmpty(gameMainFolder))
                return null;

            var scriptName = $"{game.Name} AHK Script.ahk";
            return Path.Combine(gameMainFolder, scriptName);
        }

        /// <summary>
        /// Finds the game's main folder by climbing up the directory tree until we find a folder with the same name as the game
        /// </summary>
        /// <param name="executablePath">Path to the game's executable</param>
        /// <param name="gameName">Name of the game</param>
        /// <returns>Path to the game's main folder, or null if not found</returns>
        private string? FindGameMainFolder(string executablePath, string gameName)
        {
            var currentDir = Path.GetDirectoryName(executablePath);
            if (string.IsNullOrEmpty(currentDir))
                return null;

            // Climb up the directory tree
            while (currentDir != null)
            {
                var folderName = Path.GetFileName(currentDir);
                
                // Check if this folder name matches the game name (case-insensitive)
                if (string.Equals(folderName, gameName, StringComparison.OrdinalIgnoreCase))
                {
                    return currentDir;
                }

                // Move up one level
                var parentDir = Path.GetDirectoryName(currentDir);
                if (parentDir == currentDir) // Reached root
                    break;
                    
                currentDir = parentDir;
            }

            return null;
        }
    }
}

